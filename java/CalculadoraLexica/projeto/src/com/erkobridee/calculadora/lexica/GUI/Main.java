/*
 * Main.java
 *
 * Created on 10 de Abril de 2005, 12:47
 */

package com.erkobridee.calculadora.lexica.GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import com.erkobridee.calculadora.lexica.Analise;


/**
 * Classe gráfica principal de utilização do usuário
 * @author <a href="mailto:bridee@gmail.com">Erko Bridee de Almeida Cabrera</a>
 */
public class Main extends javax.swing.JFrame {
    
    /*------------------------------------------------------------------------*
     *  Declaração das variáveis da classe
     *------------------------------------------------------------------------*/
    /**
     * <code>analise</code> -
     * Objeto da classe que realiza a análise e execução da expressão
     * apresentada 
     */
    private Analise analise;
    /**
     * <code>analiseExpressao</code> -
     * Janela que exibe a análise da expressão em forma de árvore 
     */
    private AnaliseExpressao analiseExpressao;
    /**
     * <code>actionHandle</code> - 
     * Tratador de eventos da classe relacionados a botões
     */
    private ActionHandle actionHandle = new ActionHandle();
    /*------------------------------------------------------------------------*
     *  Fim Declaração das variáveis da classe
     *------------------------------------------------------------------------*/
    
    /** Creates new form Main */
    public Main() {
        this.initObjects();
        this.initComponents();
        this.resetCalculadora();
        
        /*
         * Exemplo inicial de expressão
         */
        this.expressaoTextArea.setText( "(-1 + 6.2 * 4 + ( 7 / 6 - 9 ) + 2^8 + 4!)-200*(4%3)" );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        expressaoPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        expressaoTextArea = new javax.swing.JTextArea();
        resultadoLabel = new javax.swing.JLabel();
        resultadoField = new javax.swing.JTextField();
        executaButton = new javax.swing.JButton();
        analiseButton = new javax.swing.JButton();
        limpaButton = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();
        fecharButton = new javax.swing.JButton();

        getContentPane().setLayout(null);

        setTitle("Calculos - Calculadora L\u00e9xica");
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage( Img.getImage("smallcal.png") );
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        expressaoPanel.setLayout(null);

        expressaoPanel.setBorder(new javax.swing.border.TitledBorder("Express\u00e3o"));
        scrollPane.setViewportView(expressaoTextArea);

        expressaoPanel.add(scrollPane);
        scrollPane.setBounds(7, 20, 355, 80);

        getContentPane().add(expressaoPanel);
        expressaoPanel.setBounds(20, 10, 370, 110);

        resultadoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        resultadoLabel.setText("Resultado : ");
        getContentPane().add(resultadoLabel);
        resultadoLabel.setBounds(20, 130, 70, 20);

        resultadoField.setEditable(false);
        getContentPane().add(resultadoField);
        resultadoField.setBounds(90, 130, 290, 20);

        executaButton.setIcon( Img.getIcon("exec.png") );
        executaButton.setToolTipText("Calcula Express\u00e3o");
        executaButton.setBorder(null);
        executaButton.addActionListener( actionHandle );
        getContentPane().add(executaButton);
        executaButton.setBounds(150, 170, 25, 25);

        analiseButton.setIcon( Img.getIcon("analise.png") );
        analiseButton.setToolTipText("Analisa Express\u00e3o");
        analiseButton.setBorder(null);
        analiseButton.addActionListener( actionHandle ); 
        getContentPane().add(analiseButton);
        analiseButton.setBounds(180, 170, 25, 25);

        limpaButton.setIcon( Img.getIcon("clear.png") );
        limpaButton.setToolTipText("Apaga express\u00e3o");
        limpaButton.setBorder(null);
        limpaButton.addActionListener( actionHandle );
        getContentPane().add(limpaButton);
        limpaButton.setBounds(210, 170, 25, 25);

        infoButton.setIcon( Img.getIcon("info.png") );
        infoButton.setToolTipText("Informa\u00e7\u00e3o");
        infoButton.setBorder(null);
        infoButton.addActionListener( actionHandle );
        getContentPane().add(infoButton);
        infoButton.setBounds(330, 170, 25, 25);

        fecharButton.setIcon( Img.getIcon("exit.png") );
        fecharButton.setToolTipText("Sair");
        fecharButton.setBorder(null);
        fecharButton.addActionListener( actionHandle );
        getContentPane().add(fecharButton);
        fecharButton.setBounds(360, 170, 25, 25);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-410)/2, (screenSize.height-250)/2, 410, 250);
    }//GEN-END:initComponents
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.quit();
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new Main().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analiseButton;
    private javax.swing.JButton executaButton;
    private javax.swing.JPanel expressaoPanel;
    private javax.swing.JTextArea expressaoTextArea;
    private javax.swing.JButton fecharButton;
    private javax.swing.JButton infoButton;
    private javax.swing.JButton limpaButton;
    private javax.swing.JTextField resultadoField;
    private javax.swing.JLabel resultadoLabel;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
    /*------------------------------------------------------------------------*
     *  Tratadores de eventos
     *------------------------------------------------------------------------*/
    private class ActionHandle implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if( event.getSource() == executaButton ) {
                executaExpressao();
            } else if( event.getSource() == analiseButton ) {
                exibeAnalise();                
            } else if( event.getSource() == limpaButton ) {
                resetCalculadora();
            } else if( event.getSource() == infoButton ) {
                exibeInfo();
            } else if( event.getSource() == fecharButton ) {
                // sai do programa
                quit();
            }
        }        
    }
    /*------------------------------------------------------------------------*
     *  Fim Tratadores de eventos
     *------------------------------------------------------------------------*/
    
    /*------------------------------------------------------------------------*
     *  Métodos de serviço da classe
     *------------------------------------------------------------------------*/
    /**
     * Método para inicialização dos objetos da classe
     */
    private void initObjects() {
        this.setAnalise( new Analise() );
    }
    /**
     * Método para finalizar o programa
     */
    private void quit() {
        System.exit(0);
    }
    /**
     * Método para exibir a janela de informações sobre
     * a calculadora léxica
     */
    private void exibeInfo() {
        new InfoPrograma().show();
    }
    /**
     * Método que chama janela que exibe análise da expressão na forma de
     * uma árvore
     */
    private void exibeAnalise() {
        if( this.expressaoTextArea.getText().length() > 0 ) {
            new AnaliseExpressao( this.getAnalise().getAnalise() ).show();
        }
    }
    /**
     * Volta a calculadora a um estado inicial sem nenhuma informação preenchida
     */
    private void resetCalculadora() {
        this.expressaoTextArea.setText("");
        this.resultadoField.setText("");
        
        this.analiseButton.setEnabled(false);
    }
    /**
     * Método para executar a expressão informada
     */
    private void executaExpressao() {
        if( this.expressaoTextArea.getText().length() > 0 ) {
            this.getAnalise().setExpressao( this.expressaoTextArea.getText() );
        
	        this.resultadoField.setText( this.getAnalise().getResultado() );
	        
	        //System.out.println( this.getAnalise().getPostfixEvaluator().getPostfix() );
	        
	        this.analiseButton.setEnabled(true);
        }
    }
    /*------------------------------------------------------------------------*
     *  Fim Métodos de serviço da classe
     *------------------------------------------------------------------------*/
    
    /*------------------------------------------------------------------------*
     *  Métodos de acesso a variáveis da classe
     *------------------------------------------------------------------------*/
    /**
     * @return Analise analise.
     */
    public Analise getAnalise() {
        return analise;
    }
    /**
     * @param Analise analise.
     */
    public void setAnalise(Analise analise) {
        this.analise = analise;
    }
    /*------------------------------------------------------------------------*
     *  Fim Métodos de acesso a variáveis da classe
     *------------------------------------------------------------------------*/
}
