/*
 * Analise.java
 *
 * Created on 10 de Abril de 2005, 14:49
 */

package com.erkobridee.calculadora.lexica.GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 * Classe que exibe o resultado da analásise da expressão 
 *
 * @author <a href="mailto:erko.bridee@gmail.com">Erko Bridee de Almeida Cabrera</a>
 */
public class AnaliseExpressao extends javax.swing.JFrame {
    
    /*------------------------------------------------------------------------*
     *  Declaração das variáveis da classe
     *------------------------------------------------------------------------*/
    /**
     * <code>rootNode</code> - 
     * nó raiz da árvore de analise
     */
    private DefaultMutableTreeNode rootNode;
	/**
	 * <code>treeModel</code> - 
	 * módelo da árvore
	 */
	private DefaultTreeModel treeModel;
    /**
     * <code>actionHandle</code> - 
     * Tratador de eventos de botões da classe
     */
    private ActionHandle actionHandle = new ActionHandle();
    /*------------------------------------------------------------------------*
     *  Fim Declaração das variáveis da classe
     *------------------------------------------------------------------------*/
    
    /** Creates new form Analise */
    public AnaliseExpressao( DefaultMutableTreeNode rootNode ) {
        this.setRootNode( rootNode );
        this.initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        analisePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        //tree = new javax.swing.JTree();
        sairButton = new javax.swing.JButton();

        getContentPane().setLayout(null);

        setTitle("An\u00e1lise da Express\u00e3o");
        setIconImage( Img.getImage("analise.png") );
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm();
            }
        });

        analisePanel.setLayout(new javax.swing.BoxLayout(analisePanel, javax.swing.BoxLayout.X_AXIS));

        analisePanel.setBorder(new javax.swing.border.TitledBorder(null, "Resultado da An\u00e1lise", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        scrollPane.setViewportView(tree);

        analisePanel.add(scrollPane);

        getContentPane().add(analisePanel);
        analisePanel.setBounds(20, 10, 360, 240);

        sairButton.setText("Sair");
        sairButton.setIcon( Img.getIcon("close.png") );
        sairButton.setToolTipText("Fechar janela");
        sairButton.setBorder(null);
        sairButton.addActionListener( actionHandle );
        getContentPane().add(sairButton);
        sairButton.setBounds(150, 260, 100, 25);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-405)/2, (screenSize.height-330)/2, 405, 330);
    }//GEN-END:initComponents
    
    /** Exit the Application */
    private void exitForm() {
        this.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel analisePanel;
    private javax.swing.JTree tree;
    private javax.swing.JButton sairButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
    /*------------------------------------------------------------------------*
     *  Tratadores de eventos
     *------------------------------------------------------------------------*/
    private class ActionHandle implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if( event.getSource() == sairButton ) {
                exitForm();
            }
        }        
    }
    /*------------------------------------------------------------------------*
     *  Fim Tratadores de eventos
     *------------------------------------------------------------------------*/
    
    /*------------------------------------------------------------------------*
     *  Métodos de acesso a variáveis da classe
     *------------------------------------------------------------------------*/    
    /**
     * @return DefaultMutableTreeNode rootNode.
     */
    public DefaultMutableTreeNode getRootNode() {
        return rootNode;
    }
    /**
     * @param DefaultMutableTreeNode rootNode.
     */
    public void setRootNode(DefaultMutableTreeNode rootNode) {
        this.rootNode = rootNode;
        this.Init();
    }
    /**
     * @return javax.swing.JTree tree.
     */
    public javax.swing.JTree getTree() {
        return tree;
    }
    /**
     * @param javax.swing.JTree tree.
     */
    public void setTree(javax.swing.JTree tree) {
        this.tree = tree;
    }
    /**
     * @return DefaultTreeModel treeModel.
     */
    public DefaultTreeModel getTreeModel() {
        return treeModel;
    }
    /**
     * @param DefaultTreeModel treeModel.
     */
    public void setTreeModel(DefaultTreeModel treeModel) {
        this.treeModel = treeModel;
    }
    /*------------------------------------------------------------------------*
     *  Fim Métodos de acesso a variáveis da classe
     *------------------------------------------------------------------------*/
    
    /*------------------------------------------------------------------------*
     *  Métodos de serviço da classe
     *------------------------------------------------------------------------*/
	public void Init() {

		this.setTreeModel( new DefaultTreeModel( this.getRootNode() ) );
		
		this.setTree( new JTree( this.getTreeModel() ) );
		this.getTree().setRootVisible( false );
		this.getTree().getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

		DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
		renderer.setLeafIcon(null);
		renderer.setClosedIcon( Img.getIcon("plus.gif") );
		renderer.setOpenIcon( Img.getIcon("minus.gif") );
		this.getTree().setCellRenderer(renderer);
						
		this.getTreeModel().reload();
		
	}
    /*------------------------------------------------------------------------*
     *  Fim Métodos de serviço da classe
     *------------------------------------------------------------------------*/
}
