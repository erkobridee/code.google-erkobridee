/*
 * MainWindow.java
 *
 * Created on 29 de Setembro de 2005, 14:39
 */

package com.erkobridee.PID.GUI;

import java.awt.Graphics;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import com.erkobridee.PID.GUI.fileChooser.ImageFileView;
import com.erkobridee.PID.GUI.fileChooser.ImageFilter;
import com.erkobridee.PID.GUI.fileChooser.ImagePreview;
import com.erkobridee.PID.GUI.util.Img;
import com.erkobridee.PID.processamento.Filtros;
import com.erkobridee.PID.util.ImageIOController;
import com.erkobridee.html.HtmlPane;


/**
 * @author <a href="mailto:erko.bridee@gmail.com">Erko Bridee de Almeida Cabrera</a>
 *
 * Classe principal GUI
 */
public class MainWindow extends javax.swing.JFrame {
    
    private final int iniWidth = 500;
	private final int iniHeight = 500;
    
    // ---------------------------------------------
    // nivel do documento
    static final Integer DOCLAYER = new Integer(5);
    // nivel de janela de ferramenta
    static final Integer TOOLLAYER = new Integer(6);
    // nivel de janela de ajuda
    static final Integer HELPLAYER = new Integer(7);    
    // ---------------------------------------------
    
    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        this.setTitle( "PID v3" );
    }
    
    /**
     * Método para atualizar o tamanho dos componentes
     * de acordo com o redimencionamento da janela
     */
    private void DimensionaComponentes() {
        int janelaW, janelaH;
        janelaW = this.getWidth();
        janelaH = this.getHeight();
        
        // dimensionando imagem logo do sistema
        this.systemIMG.setBounds(0,0,janelaW,(janelaH - 40));
    }
    
    // atualiza a parte gráfica
    public void paint( Graphics g ) {
        super.paint( g );
        this.DimensionaComponentes();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        desktop = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuItemAbrir = new javax.swing.JMenuItem();
        menuItemSalvar = new javax.swing.JMenuItem();
        menuItemSair = new javax.swing.JMenuItem();
        menuFiltros = new javax.swing.JMenu();
        menuItemDesfaz = new javax.swing.JMenuItem();
        menuItemEscalaCinza = new javax.swing.JMenuItem();
        menuItemLimiar = new javax.swing.JMenuItem();
        menuItemQuantizar = new javax.swing.JMenuItem();
        menuItemMedia = new javax.swing.JMenuItem();
        menuItemMediana = new javax.swing.JMenuItem();
        menuItemPassaAlta = new javax.swing.JMenuItem();
        menuItemAltoReforco = new javax.swing.JMenuItem();
        
        menuItemRoberts = new javax.swing.JMenuItem();
        menuItemSobel = new javax.swing.JMenuItem();
        menuItemPrewitt = new javax.swing.JMenuItem();
        menuItemLaplace = new javax.swing.JMenuItem();
        
        menuItemPersonalizado = new javax.swing.JMenuItem();
        menuInfo = new javax.swing.JMenu();
        MenuItemAjuda = new javax.swing.JMenuItem();
        MenuItemSobre = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        this.setIconImage( Img.getImage("mini-logo.gif") );
        
        desktop.setBackground(new java.awt.Color(255, 255, 255));
        /* -------------------------------------------------------------------------------
         * 	Definindo logo do programa  
         */
        systemIMG = new JLabel();
        systemIMG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        systemIMG.setIcon( Img.getIcon("logo.jpg") );
        systemIMG.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        systemIMG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        desktop.add(systemIMG);
       
        getContentPane().add(desktop, java.awt.BorderLayout.CENTER);

        /*
         * -------------------------------------------------------------------------------
         */
        
        menuArquivo.setText("Aquivo");
        menuArquivo.setIcon( Img.getIcon("16x16/edit.png") );
        
        menuItemAbrir.setText("Abrir");
        menuItemAbrir.setIcon( Img.getIcon("16x16/fileopen.png") );
        menuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAbrirActionPerformed(evt);
            }
        });

        menuArquivo.add(menuItemAbrir);

        menuItemSalvar.setText("Salvar");
        menuItemSalvar.setIcon( Img.getIcon("16x16/filesave.png") );
        menuItemSalvar.setMnemonic('S');
        menuItemSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSalvarActionPerformed(evt);
            }
        });

        menuArquivo.add(menuItemSalvar);

        menuArquivo.add(new javax.swing.JSeparator());

        menuItemSair.setText("Sair");
        menuItemSair.setIcon( Img.getIcon("16x16/exit.png") );
        menuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSairActionPerformed(evt);
            }
        });

        menuArquivo.add(menuItemSair);

        menuBar.add(menuArquivo);

        /*
         * -------------------------------------------------------------------------------
         */
        
        menuFiltros.setText("Filtros");
        menuFiltros.setIcon( Img.getIcon("16x16/exec.png") );
        
        menuItemDesfaz.setText("Desfaz Filtros");
        menuItemDesfaz.setIcon( Img.getIcon("16x16/reload.png") );
        menuItemDesfaz.setMnemonic('D');
        menuItemDesfaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDesfazActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemDesfaz);

        menuFiltros.add(new javax.swing.JSeparator());

        menuItemEscalaCinza.setText("Escala de Cinza");
        //menuItemEscalaCinza.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemEscalaCinza.setMnemonic('C');
        menuItemEscalaCinza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEscalaCinzaActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemEscalaCinza);

        menuItemLimiar.setText("Limiariza\u00e7\u00e3o");
        //menuItemLimiar.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemLimiar.setMnemonic('L');
        menuItemLimiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLimiarActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemLimiar);

        menuItemQuantizar.setText("Quantiza\u00e7\u00e3o");
        //menuItemQuantizar.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemQuantizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemQuantizarActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemQuantizar);
        
        menuFiltros.add(new javax.swing.JSeparator());

        menuItemMedia.setText("Media");
        //menuItemMedia.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemMedia.setMnemonic('d');
        menuItemMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMediaActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemMedia);

        menuItemMediana.setText("Mediana");
        //menuItemMediana.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemMediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMedianaActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemMediana);

        menuItemPassaAlta.setText("Passa Alta");
        //menuItemPassaAlta.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemPassaAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPassaAltaActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemPassaAlta);             

        menuItemAltoReforco.setText("Alto Refor\u00e7o");
        //menuItemAltoReforco.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemAltoReforco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAltoReforcoActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemAltoReforco);
        
        menuFiltros.add(new javax.swing.JSeparator());
        
        //--------------------------------------------------------------------------------
        // 4º Bimestre
        //--------------------------------------------------------------------------------        
        menuItemRoberts.setText("Roberts");
        //menuItemRoberts.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemRoberts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRobertsActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemRoberts);
        
        menuItemSobel.setText("Sobel");
        //menuItemSobel.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSobelActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemSobel);
        
        menuItemPrewitt.setText("Prewitt");
        //menuItemPrewitt.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrewittActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemPrewitt);
        
        menuItemLaplace.setText("Laplace");
        //menuItemLaplace.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemLaplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLaplaceActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemLaplace);        
        //--------------------------------------------------------------------------------
        
        menuFiltros.add(new javax.swing.JSeparator());

        menuItemPersonalizado.setText("Personalizado");
        //menuItemPersonalizado.setIcon( Img.getIcon("16x16/direta.gif") );
        menuItemPersonalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPersonalizadoActionPerformed(evt);
            }
        });

        menuFiltros.add(menuItemPersonalizado);

        menuBar.add(menuFiltros);

        /*
         * -------------------------------------------------------------------------------
         */
        
        menuInfo.setText("Info");
        menuInfo.setIcon( Img.getIcon("16x16/info.png") );
        
        MenuItemAjuda.setText("Ajuda");
        MenuItemAjuda.setIcon( Img.getIcon("16x16/ajuda.png") );
        MenuItemAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAjudaActionPerformed(evt);
            }
        });

        menuInfo.add(MenuItemAjuda);

        menuInfo.add(new javax.swing.JSeparator());

        MenuItemSobre.setText("Sobre");
        MenuItemSobre.setIcon( Img.getIcon("16x16/sobre.png") );
        MenuItemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSobreActionPerformed(evt);
            }
        });

        menuInfo.add(MenuItemSobre);

        /*
         * -------------------------------------------------------------------------------
         */
        
        menuBar.add(menuInfo);

        setJMenuBar(menuBar);
               
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-this.iniWidth)/2, (screenSize.height-this.iniHeight)/2, this.iniWidth, this.iniHeight);
    }//GEN-END:initComponents

    //-- MENU INFO --
    // ação do item ajuda
    private void MenuItemAjudaActionPerformed(java.awt.event.ActionEvent evt) {
        
        JFrame frame = new JFrame();
        frame.setTitle("Ajuda do sitema PID v3");
        frame.setIconImage( Img.getImage("16x16/ajuda.png") );
        // x = 650
        // y = 550
        
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds((screenSize.width-690)/2, (screenSize.height-600)/2, 690, 600);        
        
        HtmlPane html = new HtmlPane();
        frame.setContentPane(html);
        frame.show();
        
    }
    // ação do item sobre
    private void MenuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {
        new SobrePrograma().show();
    }
    //-- FIM MENU INFO --    
    
    //-- MENU FILTROS --
    // ação do item desfazer tudo
    private void menuItemDesfazActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            
            iif.setTitle( "Imagem Original" );
            
            iif.carregaOriginal();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }    
    }
    // ação do item escala de cinza
    private void menuItemEscalaCinzaActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame(); 
            
            iif.setTitle( "Escala de Cinza" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.EscalaCinza() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item limiar
    private void menuItemLimiarActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame(); 
            
            iif.setTitle( " Limiar " );
        
            // recuperando a informação do usuário
            int limiar = Integer.parseInt( JOptionPane.showInputDialog(null, "Qual o nível de Limiarização desejado? (0-255)", "Nível para Limiarização da Imagem", JOptionPane.QUESTION_MESSAGE) );
            
            // verificando se está dentro do limite aceito
            if( limiar >= 0 && limiar <= 255 ) {
	            Filtros filtros = new Filtros();                
	            filtros.setBiOriginal( iif.getBufferedImage() );
	            iif.setBufferedImage( filtros.Limiarizacao( limiar ) );
	            iif.reload();
            } else {
                JOptionPane.showMessageDialog(null, "Valor fora do intervalo aceito!", "Erro!", JOptionPane.ERROR_MESSAGE);
            }
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item quantizar
    private void menuItemQuantizarActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame(); 
                               
            // recuperando a informação do usuário
            int tons = Integer.parseInt( JOptionPane.showInputDialog(null, "Quantos tons de cor? (0-255)", "Quantidade de tons da Imagem", JOptionPane.QUESTION_MESSAGE) );
            
            iif.setTitle( " Quantizado em "+ tons +" tons de cores " );
            
            // verificando se está dentro do limite aceito
            if( tons >= 0 && tons <= 255 ) {
	            Filtros filtros = new Filtros();                
	            filtros.setBiOriginal( iif.getBufferedImage() );
	            iif.setBufferedImage( filtros.Quantizacao( tons ) );
	            iif.reload();
            } else {
                JOptionPane.showMessageDialog(null, "Valor fora do intervalo aceito!", "Erro!", JOptionPane.ERROR_MESSAGE);
            }
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item media
    private void menuItemMediaActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Média" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.Media() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item mediana
    private void menuItemMedianaActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Mediana" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.Mediana() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item passa alta
    private void menuItemPassaAltaActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Passa Alta" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.PassaAlta() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item alto reforço
    private void menuItemAltoReforcoActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame(); 
                              
            // recuperando a informação do usuário
            double A = Double.parseDouble( JOptionPane.showInputDialog(null, "Informe o fator de ampliação? (A > 1)", "Alto Reforço da Imagem", JOptionPane.QUESTION_MESSAGE) );
            
            // verificando se está dentro do limite aceito
            if( A > 1 ) {
                
                iif.setTitle( " Filtro Alto Reforço " );
                
	            Filtros filtros = new Filtros();                
	            filtros.setBiOriginal( iif.getBufferedImage() );
	            iif.setBufferedImage( filtros.AltoReforco( A ) );
	            iif.reload();
            } else {
                JOptionPane.showMessageDialog(null, "Valor não aceito!", "Erro!", JOptionPane.ERROR_MESSAGE);
            }
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    
    //------------------------------------------------------------------------------------------------------------------------------
    // 4º Bimestre
    //------------------------------------------------------------------------------------------------------------------------------    
    // ação do item Roberts
    private void menuItemRobertsActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Roberts" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.Roberts() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item Sobel
    private void menuItemSobelActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Sobel" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.Sobel() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item Sobel
    private void menuItemPrewittActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Prewitt" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.Prewitt() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    // ação do item Sobel
    private void menuItemLaplaceActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
            iif.setTitle( "Filtro Laplace" );
            
            Filtros filtros = new Filtros();                
            filtros.setBiOriginal( iif.getBufferedImage() );
            iif.setBufferedImage( filtros.Laplace() );
            iif.reload();
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }    
    //------------------------------------------------------------------------------------------------------------------------------
    
    // ação do item personalizado
    private void menuItemPersonalizadoActionPerformed(java.awt.event.ActionEvent evt) {
        if(desktop.getSelectedFrame()!= null) {
            
            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
                        
            DefineMascara defineMascara = new DefineMascara(new javax.swing.JFrame(), true);
            defineMascara.show();
            
            if( defineMascara.isAplica() ) {
                iif.setTitle( " Filtro Personalizado " );
                
                double[][] mascara = defineMascara.getMascara();
                                
                Filtros filtros = new Filtros();
                filtros.setBiOriginal( iif.getBufferedImage() );
                iif.setBufferedImage( filtros.MascaraCustomizada( mascara, false ) );
                iif.reload();
            }                
            
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE);  }
    }
    //-- FIM MENU FILTROS --
    
    //-- MENU ARQUIVO --
    // salva a imagem do frame selecionado
    private void menuItemSalvarActionPerformed(java.awt.event.ActionEvent evt) {
        if( desktop.getSelectedFrame()!= null ) {
	        JFileChooser fc = new JFileChooser();
	        fc.setApproveButtonText( "OK" );
	        fc.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );        
	        int returnVal = fc.showDialog(this, "Salvar");
	        if (returnVal == JFileChooser.APPROVE_OPTION) {
	            File file = fc.getSelectedFile();                        
	            ImageInternalFrame iif = (ImageInternalFrame)desktop.getSelectedFrame();
		        ImageIOController.save( iif.getBufferedImage(), file );
	        }
        } else { JOptionPane.showMessageDialog(null, "Selecione uma imagem!", "Atenção!", JOptionPane.INFORMATION_MESSAGE); }
    }

    // abre uma imagem solicitada
    private void menuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();

        fc.addChoosableFileFilter(new ImageFilter());
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileView(new ImageFileView());
        fc.setAccessory(new ImagePreview(fc));
        // monstrando
        int returnVal = fc.showDialog(this, "Abrir");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            ImageInternalFrame iif = new ImageInternalFrame();
            iif.setTitle( "Imagem Original" );
            iif.setImageFile( file );
            iif.carregaOriginal();
            iif.setSize( 600, 500 );
            desktop.add( iif, DOCLAYER );
        	try { 
        	    iif.setVisible(true);
        	    iif.setSelected(true); 
        	} catch (java.beans.PropertyVetoException e2) {}
        }
    }
    
    // finaliza o programa
    private void menuItemSairActionPerformed(java.awt.event.ActionEvent evt) {
       this.quit();
    }
    //-- FIM MENU ARQUIVO --
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
       this.quit(); 
    }
    
    private void quit() {
        System.exit(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new MainWindow().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel systemIMG;
    
    private javax.swing.JMenuItem MenuItemAjuda;
    private javax.swing.JMenuItem MenuItemSobre;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFiltros;
    private javax.swing.JMenu menuInfo;
    private javax.swing.JMenuItem menuItemAbrir;
    private javax.swing.JMenuItem menuItemAltoReforco;
    private javax.swing.JMenuItem menuItemDesfaz;
    private javax.swing.JMenuItem menuItemEscalaCinza;
    private javax.swing.JMenuItem menuItemLimiar;
    private javax.swing.JMenuItem menuItemMedia;
    private javax.swing.JMenuItem menuItemMediana;    
    private javax.swing.JMenuItem menuItemPassaAlta;
    
    private javax.swing.JMenuItem menuItemRoberts;
    private javax.swing.JMenuItem menuItemSobel;
    private javax.swing.JMenuItem menuItemPrewitt;
    private javax.swing.JMenuItem menuItemLaplace;
    
    private javax.swing.JMenuItem menuItemPersonalizado;
    private javax.swing.JMenuItem menuItemQuantizar;
    private javax.swing.JMenuItem menuItemSair;
    private javax.swing.JMenuItem menuItemSalvar;
    // End of variables declaration//GEN-END:variables
    
}
